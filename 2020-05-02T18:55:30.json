{"timestamp": "2020-05-02T19:05:14", "body": "The new and improved `ff.scm` would look like:\n\n```scheme\n(define (create-app container init view)\n  (let ((state (init)))  ;; init state\n    (letrec ((make-controller\n              (lambda (action)\n                ;; passed to view, used to wrap DOM event callback.\n                (lambda args\n                  (let ((new (apply (action state args))))\n                    (set! state new)\n                    (render!)))))\n             (render!\n              (lambda ()\n                (set! container (diff+patch! container (view state make-controller)))))))\n      (render!)))\n```\n\nThat is only part of the story, because `action` can be paused to\nexecute something asynchronous.  Take a look at an improved\n`createApp` written in JavaScript for the browser:\n\n```javascript\nlet createSimpleApp = function(app, root, init, view) {\n    let model = init();\n    let render;\n\n    let makeController = function(controller) {\n        return function(event) {\n            // XXX: This might be performance bottleneck\n            // https://fb.me/react-event-pooling\n            event.persist()\n            let promise = controller(app, model, event);\n            promise.then(function(transformer) {\n                // XXX: if the controller returns nothing\n                // this will lead to an 'undefined' error\n                // which is not very friendly.\n                let newModel = transformer();\n                model = newModel;  // XXX: side effect\n                render();\n            });\n        }\n    };\n\n    /* Render the application */\n    render = function() {\n        pk('rendering');\n        let html = view(model, makeController);\n        ReactDOM.render(html, root);\n    };\n\n    // sneak into an application from the outside.\n    return function(change) {\n        let promise = change(app, model);\n        promise.then(function(transformer) {\n            if(transformer) {\n                let newModel = transformer();\n                model = newModel;  // XXX: side effect\n                render();\n            }\n        });\n    };\n};\n```", "links": []}